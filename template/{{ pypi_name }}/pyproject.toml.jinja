[tool.poetry]
name = "{{ pypi_name }}"
description = "{{ project_description }}"
authors = ["{{ author }}{% if email|length != 0 %} <{{ email }}>{% endif %}"]
version = "0.1.0"
packages = [{ include = "{{ module_name }}" }]

readme = "README.md"
license = "GPL-3.0-or-later"

classifiers = [
    # Get the list of trove classifiers here: https://pypi.org/classifiers/
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Natural Language :: English",
    {% if license == 'gnu' %}"License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)",{% elif license == 'mit'  %}"License :: OSI Approved :: MIT License",{% endif %}
]{% if add_docs %}
documentation = "https://{{ module_name.replace('_', '') }}.readthedocs.io/en/latest/index.html"{% endif %}
homepage = "https://github.com/{{ username }}/{{ pypi_name }}"
# keywords = ["awesome", "project"]  # Maximum of 5 keywords

[tool.poetry.dependencies]
python = "^3.8"{% if is_app %}

[tool.poetry.scripts]
{{ module_name }} = "{{ module_name }}.__main__:main"
{% endif %}

[tool.poetry.group.dev.dependencies]
black = "^23.1.0"
hypothesis = "^6.68.2"
mypy = "^1.0.1"
pytest = "^7.2.1"
pytest-clarity = "^1.0.1"
pytest-cov = "^4.0.0"
{% if use_ruff %}ruff="^0.4.4"
{% else %}pylint = "^3.0.3"{% endif %}
{% if add_docs %}
Sphinx = "^6.1.3"{% endif %}
toml = "^0.10.2"

[tool.poe.tasks]


###
# Lint/Formatting tasks
###

{% if not use_ruff %}[tool.poe.tasks.check_black]
cmd = "black --check {{module_name}}"

[tool.poe.tasks.check_imports]
cmd = "isort --check-only --profile=black {{module_name}}" {% endif %}

{% if use_ruff %}[tool.poe.tasks.ruff-fix]
cmd = "ruff check {{module_name}} --fix"
help = "Ruff autofix"

[tool.poe.tasks.format-fix]
shell = "ruff format src"
help = "Format code"

[tool.poe.tasks.ruff]
cmd = "ruff check {{module_name}}"
help = "Run Ruff on codebase"{% else %}[tool.poe.tasks.pylint]
cmd = "pylint {{module_name}}"
help = "Run pylint on codebase"{% endif %}


[tool.poe.tasks.lint]
{% if use_ruff %}sequence = ["format-check", "ruff"]{% else %}sequence = ["check_black", "check_imports", "pylint"]{% endif %}

{% if use_ruff %}[tool.poe.tasks.lint-fix]
sequence = ["format-fix", "ruff-fix"]{% endif %}

[tool.poe.tasks.test]
cmd = "pytest -vvv --cov={{module_name}}"
help = "Simply run test suite"

{% if add_docs %}
    [tool.poe.tasks.docs]
    cmd = "sphinx-build docs build"
    help = "Build documentation"{% endif %}


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

{% if not use_ruff %}[tool.pylint.messages_control]
disable = [
    "arguments-differ",
    "attribute-defined-outside-init",
    "blacklisted-name",
    "duplicate-code",
    "fixme",
    "import-error",
    "no-member",
    "no-name-in-module",
    "protected-access",
    "stop-iteration-return",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-return-statements",
    "too-many-statements",
    "abstract-method",
    "chained-comparison",
    "eval-used",
    "exec-used",
    "expression-not-assigned",
    "global-statement",
    "missing-docstring",
    "missing-function-docstring",
    "redefined-argument-from-local",
    "redefined-outer-name",
    "reimported",
    "too-many-ancestors",
    "unexpected-special-method-signature",
    "consider-using-from-import",
    "try-except-raise"
]{% endif %}

{% if use_ruff %}[tool.ruff]
# Same as Black.
line-length = 88
target-version = "py38"
[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D",   # "No docs"
    "T20", # "Don't use print or pprint"
    # "ANN",  # Type annotation errors (or the lack of it)
    "ANN101", # The type annotation for `self` is inferred
    "ANN201", #  Missing return type annotation for public function
    "FBT",    # I actually don't know why this exists
    "FA", # FA flake8-future-annotations only needed if suppporting python < 3.9
    "A001", # Variable is shadowing a Python builtin
    "A002", # Check for function arguments that use the same names as builtins
    "TD", # TODO checks
    "FIX002", # line conatins TODO 
    "PLR0913", # too many arguments
    "EM101", # Checks for the use of string literals in exception constructors
    "TRY003", # Avoid specifying long messages outside the exception class
    "N815"# Variable in class scope should not be mixedCase 

]
[tool.ruff.lint.flake8-bugbear]
# Allow default arguments like, e.g., `data: List[str] = fastapi.Query(None)`.
extend-immutable-calls = ["fastapi.Depends", "fastapi.Query"]
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["S101", "D"]
"docs/conf.py" = ["INP001", "A001"]{% endif %}

